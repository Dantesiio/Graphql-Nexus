/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../auth/middleware"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Comment: { // root type
    authorId: string; // String!
    content: string; // String!
    createdAt?: string | null; // String
    id: string; // ID!
    projectId: string; // String!
  }
  Mutation: {};
  Project: { // root type
    description?: string | null; // String
    id: string; // ID!
    name: string; // String!
    ownerId: string; // String!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // ID!
    name?: string | null; // String
    role: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Comment: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    authorId: string; // String!
    content: string; // String!
    createdAt: string | null; // String
    id: string; // ID!
    project: NexusGenRootTypes['Project'] | null; // Project
    projectId: string; // String!
  }
  Mutation: { // field return type
    createComment: NexusGenRootTypes['Comment'] | null; // Comment
    createProject: NexusGenRootTypes['Project'] | null; // Project
    deleteComment: NexusGenRootTypes['Comment'] | null; // Comment
    deleteProject: NexusGenRootTypes['Project'] | null; // Project
    deleteUser: NexusGenRootTypes['User'] | null; // User
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    register: NexusGenRootTypes['User'] | null; // User
    updateComment: NexusGenRootTypes['Comment'] | null; // Comment
    updateProject: NexusGenRootTypes['Project'] | null; // Project
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Project: { // field return type
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    description: string | null; // String
    id: string; // ID!
    name: string; // String!
    owner: NexusGenRootTypes['User'] | null; // User
    ownerId: string; // String!
  }
  Query: { // field return type
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    projects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    email: string; // String!
    id: string; // ID!
    name: string | null; // String
    projects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
    role: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Comment: { // field return type name
    author: 'User'
    authorId: 'String'
    content: 'String'
    createdAt: 'String'
    id: 'ID'
    project: 'Project'
    projectId: 'String'
  }
  Mutation: { // field return type name
    createComment: 'Comment'
    createProject: 'Project'
    deleteComment: 'Comment'
    deleteProject: 'Project'
    deleteUser: 'User'
    login: 'AuthPayload'
    register: 'User'
    updateComment: 'Comment'
    updateProject: 'Project'
    updateUser: 'User'
  }
  Project: { // field return type name
    comments: 'Comment'
    description: 'String'
    id: 'ID'
    name: 'String'
    owner: 'User'
    ownerId: 'String'
  }
  Query: { // field return type name
    comments: 'Comment'
    projects: 'Project'
    users: 'User'
  }
  User: { // field return type name
    comments: 'Comment'
    email: 'String'
    id: 'ID'
    name: 'String'
    projects: 'Project'
    role: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createComment: { // args
      content: string; // String!
      projectId: string; // String!
    }
    createProject: { // args
      description?: string | null; // String
      name: string; // String!
    }
    deleteComment: { // args
      id: string; // String!
    }
    deleteProject: { // args
      id: string; // String!
    }
    deleteUser: { // args
      id: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    register: { // args
      email: string; // String!
      name?: string | null; // String
      password: string; // String!
    }
    updateComment: { // args
      content: string; // String!
      id: string; // String!
    }
    updateProject: { // args
      description?: string | null; // String
      id: string; // String!
      name?: string | null; // String
    }
    updateUser: { // args
      email?: string | null; // String
      id: string; // String!
      name?: string | null; // String
      role?: string | null; // String
    }
  }
  Query: {
    comments: { // args
      projectId?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}